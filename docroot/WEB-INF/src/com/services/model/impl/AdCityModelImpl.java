/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.services.model.AdCity;
import com.services.model.AdCityModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AdCity service. Represents a row in the &quot;AL_AdCity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.services.model.AdCityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdCityImpl}.
 * </p>
 *
 * @author Ankur Srivastava
 * @see AdCityImpl
 * @see com.services.model.AdCity
 * @see com.services.model.AdCityModel
 * @generated
 */
public class AdCityModelImpl extends BaseModelImpl<AdCity>
	implements AdCityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ad city model instance should use the {@link com.services.model.AdCity} interface instead.
	 */
	public static final String TABLE_NAME = "AL_AdCity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cityId", Types.BIGINT },
			{ "cityName", Types.VARCHAR },
			{ "stateName", Types.VARCHAR },
			{ "cityStatus", Types.BOOLEAN },
			{ "popular", Types.BOOLEAN },
			{ "createdDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table AL_AdCity (cityId LONG not null primary key,cityName VARCHAR(75) null,stateName VARCHAR(75) null,cityStatus BOOLEAN,popular BOOLEAN,createdDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table AL_AdCity";
	public static final String ORDER_BY_JPQL = " ORDER BY adCity.cityName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AL_AdCity.cityName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.services.model.AdCity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.services.model.AdCity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.services.model.AdCity"),
			true);
	public static long CITYNAME_COLUMN_BITMASK = 1L;
	public static long CITYSTATUS_COLUMN_BITMASK = 2L;
	public static long POPULAR_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.services.model.AdCity"));

	public AdCityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AdCity.class;
	}

	@Override
	public String getModelClassName() {
		return AdCity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cityId", getCityId());
		attributes.put("cityName", getCityName());
		attributes.put("stateName", getStateName());
		attributes.put("cityStatus", getCityStatus());
		attributes.put("popular", getPopular());
		attributes.put("createdDate", getCreatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cityId = (Long)attributes.get("cityId");

		if (cityId != null) {
			setCityId(cityId);
		}

		String cityName = (String)attributes.get("cityName");

		if (cityName != null) {
			setCityName(cityName);
		}

		String stateName = (String)attributes.get("stateName");

		if (stateName != null) {
			setStateName(stateName);
		}

		Boolean cityStatus = (Boolean)attributes.get("cityStatus");

		if (cityStatus != null) {
			setCityStatus(cityStatus);
		}

		Boolean popular = (Boolean)attributes.get("popular");

		if (popular != null) {
			setPopular(popular);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}
	}

	@Override
	public long getCityId() {
		return _cityId;
	}

	@Override
	public void setCityId(long cityId) {
		_cityId = cityId;
	}

	@Override
	public String getCityName() {
		if (_cityName == null) {
			return StringPool.BLANK;
		}
		else {
			return _cityName;
		}
	}

	@Override
	public void setCityName(String cityName) {
		_columnBitmask = -1L;

		if (_originalCityName == null) {
			_originalCityName = _cityName;
		}

		_cityName = cityName;
	}

	public String getOriginalCityName() {
		return GetterUtil.getString(_originalCityName);
	}

	@Override
	public String getStateName() {
		if (_stateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateName;
		}
	}

	@Override
	public void setStateName(String stateName) {
		_stateName = stateName;
	}

	@Override
	public boolean getCityStatus() {
		return _cityStatus;
	}

	@Override
	public boolean isCityStatus() {
		return _cityStatus;
	}

	@Override
	public void setCityStatus(boolean cityStatus) {
		_columnBitmask |= CITYSTATUS_COLUMN_BITMASK;

		if (!_setOriginalCityStatus) {
			_setOriginalCityStatus = true;

			_originalCityStatus = _cityStatus;
		}

		_cityStatus = cityStatus;
	}

	public boolean getOriginalCityStatus() {
		return _originalCityStatus;
	}

	@Override
	public boolean getPopular() {
		return _popular;
	}

	@Override
	public boolean isPopular() {
		return _popular;
	}

	@Override
	public void setPopular(boolean popular) {
		_columnBitmask |= POPULAR_COLUMN_BITMASK;

		if (!_setOriginalPopular) {
			_setOriginalPopular = true;

			_originalPopular = _popular;
		}

		_popular = popular;
	}

	public boolean getOriginalPopular() {
		return _originalPopular;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AdCity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AdCity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AdCity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AdCityImpl adCityImpl = new AdCityImpl();

		adCityImpl.setCityId(getCityId());
		adCityImpl.setCityName(getCityName());
		adCityImpl.setStateName(getStateName());
		adCityImpl.setCityStatus(getCityStatus());
		adCityImpl.setPopular(getPopular());
		adCityImpl.setCreatedDate(getCreatedDate());

		adCityImpl.resetOriginalValues();

		return adCityImpl;
	}

	@Override
	public int compareTo(AdCity adCity) {
		int value = 0;

		value = getCityName().compareTo(adCity.getCityName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AdCity)) {
			return false;
		}

		AdCity adCity = (AdCity)obj;

		long primaryKey = adCity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AdCityModelImpl adCityModelImpl = this;

		adCityModelImpl._originalCityName = adCityModelImpl._cityName;

		adCityModelImpl._originalCityStatus = adCityModelImpl._cityStatus;

		adCityModelImpl._setOriginalCityStatus = false;

		adCityModelImpl._originalPopular = adCityModelImpl._popular;

		adCityModelImpl._setOriginalPopular = false;

		adCityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdCity> toCacheModel() {
		AdCityCacheModel adCityCacheModel = new AdCityCacheModel();

		adCityCacheModel.cityId = getCityId();

		adCityCacheModel.cityName = getCityName();

		String cityName = adCityCacheModel.cityName;

		if ((cityName != null) && (cityName.length() == 0)) {
			adCityCacheModel.cityName = null;
		}

		adCityCacheModel.stateName = getStateName();

		String stateName = adCityCacheModel.stateName;

		if ((stateName != null) && (stateName.length() == 0)) {
			adCityCacheModel.stateName = null;
		}

		adCityCacheModel.cityStatus = getCityStatus();

		adCityCacheModel.popular = getPopular();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			adCityCacheModel.createdDate = createdDate.getTime();
		}
		else {
			adCityCacheModel.createdDate = Long.MIN_VALUE;
		}

		return adCityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{cityId=");
		sb.append(getCityId());
		sb.append(", cityName=");
		sb.append(getCityName());
		sb.append(", stateName=");
		sb.append(getStateName());
		sb.append(", cityStatus=");
		sb.append(getCityStatus());
		sb.append(", popular=");
		sb.append(getPopular());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.services.model.AdCity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cityId</column-name><column-value><![CDATA[");
		sb.append(getCityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cityName</column-name><column-value><![CDATA[");
		sb.append(getCityName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateName</column-name><column-value><![CDATA[");
		sb.append(getStateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cityStatus</column-name><column-value><![CDATA[");
		sb.append(getCityStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>popular</column-name><column-value><![CDATA[");
		sb.append(getPopular());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AdCity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { AdCity.class };
	private long _cityId;
	private String _cityName;
	private String _originalCityName;
	private String _stateName;
	private boolean _cityStatus;
	private boolean _originalCityStatus;
	private boolean _setOriginalCityStatus;
	private boolean _popular;
	private boolean _originalPopular;
	private boolean _setOriginalPopular;
	private Date _createdDate;
	private long _columnBitmask;
	private AdCity _escapedModel;
}