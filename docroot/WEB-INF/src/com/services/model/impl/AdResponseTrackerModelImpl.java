/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.services.model.AdResponseTracker;
import com.services.model.AdResponseTrackerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AdResponseTracker service. Represents a row in the &quot;AL_AdResponseTracker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.services.model.AdResponseTrackerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdResponseTrackerImpl}.
 * </p>
 *
 * @author Ankur Srivastava
 * @see AdResponseTrackerImpl
 * @see com.services.model.AdResponseTracker
 * @see com.services.model.AdResponseTrackerModel
 * @generated
 */
public class AdResponseTrackerModelImpl extends BaseModelImpl<AdResponseTracker>
	implements AdResponseTrackerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ad response tracker model instance should use the {@link com.services.model.AdResponseTracker} interface instead.
	 */
	public static final String TABLE_NAME = "AL_AdResponseTracker";
	public static final Object[][] TABLE_COLUMNS = {
			{ "artId", Types.BIGINT },
			{ "adId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "userIP", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table AL_AdResponseTracker (artId LONG not null primary key,adId LONG,userId LONG,name VARCHAR(75) null,email VARCHAR(75) null,phone VARCHAR(75) null,comments STRING null,userIP VARCHAR(75) null,createdDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table AL_AdResponseTracker";
	public static final String ORDER_BY_JPQL = " ORDER BY adResponseTracker.createdDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY AL_AdResponseTracker.createdDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.services.model.AdResponseTracker"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.services.model.AdResponseTracker"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.services.model.AdResponseTracker"),
			true);
	public static long ADID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long CREATEDDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.services.model.AdResponseTracker"));

	public AdResponseTrackerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _artId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setArtId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _artId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AdResponseTracker.class;
	}

	@Override
	public String getModelClassName() {
		return AdResponseTracker.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("artId", getArtId());
		attributes.put("adId", getAdId());
		attributes.put("userId", getUserId());
		attributes.put("name", getName());
		attributes.put("email", getEmail());
		attributes.put("phone", getPhone());
		attributes.put("comments", getComments());
		attributes.put("userIP", getUserIP());
		attributes.put("createdDate", getCreatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long artId = (Long)attributes.get("artId");

		if (artId != null) {
			setArtId(artId);
		}

		Long adId = (Long)attributes.get("adId");

		if (adId != null) {
			setAdId(adId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		String userIP = (String)attributes.get("userIP");

		if (userIP != null) {
			setUserIP(userIP);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}
	}

	@Override
	public long getArtId() {
		return _artId;
	}

	@Override
	public void setArtId(long artId) {
		_artId = artId;
	}

	@Override
	public long getAdId() {
		return _adId;
	}

	@Override
	public void setAdId(long adId) {
		_columnBitmask |= ADID_COLUMN_BITMASK;

		if (!_setOriginalAdId) {
			_setOriginalAdId = true;

			_originalAdId = _adId;
		}

		_adId = adId;
	}

	public long getOriginalAdId() {
		return _originalAdId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public String getUserIP() {
		if (_userIP == null) {
			return StringPool.BLANK;
		}
		else {
			return _userIP;
		}
	}

	@Override
	public void setUserIP(String userIP) {
		_userIP = userIP;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		_createdDate = createdDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AdResponseTracker.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AdResponseTracker toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AdResponseTracker)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AdResponseTrackerImpl adResponseTrackerImpl = new AdResponseTrackerImpl();

		adResponseTrackerImpl.setArtId(getArtId());
		adResponseTrackerImpl.setAdId(getAdId());
		adResponseTrackerImpl.setUserId(getUserId());
		adResponseTrackerImpl.setName(getName());
		adResponseTrackerImpl.setEmail(getEmail());
		adResponseTrackerImpl.setPhone(getPhone());
		adResponseTrackerImpl.setComments(getComments());
		adResponseTrackerImpl.setUserIP(getUserIP());
		adResponseTrackerImpl.setCreatedDate(getCreatedDate());

		adResponseTrackerImpl.resetOriginalValues();

		return adResponseTrackerImpl;
	}

	@Override
	public int compareTo(AdResponseTracker adResponseTracker) {
		int value = 0;

		value = DateUtil.compareTo(getCreatedDate(),
				adResponseTracker.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AdResponseTracker)) {
			return false;
		}

		AdResponseTracker adResponseTracker = (AdResponseTracker)obj;

		long primaryKey = adResponseTracker.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AdResponseTrackerModelImpl adResponseTrackerModelImpl = this;

		adResponseTrackerModelImpl._originalAdId = adResponseTrackerModelImpl._adId;

		adResponseTrackerModelImpl._setOriginalAdId = false;

		adResponseTrackerModelImpl._originalUserId = adResponseTrackerModelImpl._userId;

		adResponseTrackerModelImpl._setOriginalUserId = false;

		adResponseTrackerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdResponseTracker> toCacheModel() {
		AdResponseTrackerCacheModel adResponseTrackerCacheModel = new AdResponseTrackerCacheModel();

		adResponseTrackerCacheModel.artId = getArtId();

		adResponseTrackerCacheModel.adId = getAdId();

		adResponseTrackerCacheModel.userId = getUserId();

		adResponseTrackerCacheModel.name = getName();

		String name = adResponseTrackerCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			adResponseTrackerCacheModel.name = null;
		}

		adResponseTrackerCacheModel.email = getEmail();

		String email = adResponseTrackerCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			adResponseTrackerCacheModel.email = null;
		}

		adResponseTrackerCacheModel.phone = getPhone();

		String phone = adResponseTrackerCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			adResponseTrackerCacheModel.phone = null;
		}

		adResponseTrackerCacheModel.comments = getComments();

		String comments = adResponseTrackerCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			adResponseTrackerCacheModel.comments = null;
		}

		adResponseTrackerCacheModel.userIP = getUserIP();

		String userIP = adResponseTrackerCacheModel.userIP;

		if ((userIP != null) && (userIP.length() == 0)) {
			adResponseTrackerCacheModel.userIP = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			adResponseTrackerCacheModel.createdDate = createdDate.getTime();
		}
		else {
			adResponseTrackerCacheModel.createdDate = Long.MIN_VALUE;
		}

		return adResponseTrackerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{artId=");
		sb.append(getArtId());
		sb.append(", adId=");
		sb.append(getAdId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", userIP=");
		sb.append(getUserIP());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.services.model.AdResponseTracker");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>artId</column-name><column-value><![CDATA[");
		sb.append(getArtId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adId</column-name><column-value><![CDATA[");
		sb.append(getAdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIP</column-name><column-value><![CDATA[");
		sb.append(getUserIP());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AdResponseTracker.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AdResponseTracker.class
		};
	private long _artId;
	private long _adId;
	private long _originalAdId;
	private boolean _setOriginalAdId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _name;
	private String _email;
	private String _phone;
	private String _comments;
	private String _userIP;
	private Date _createdDate;
	private long _columnBitmask;
	private AdResponseTracker _escapedModel;
}