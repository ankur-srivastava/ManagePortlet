/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.services.model.AdCategory;
import com.services.model.AdCategoryModel;
import com.services.model.AdCategorySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AdCategory service. Represents a row in the &quot;AL_AdCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.services.model.AdCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdCategoryImpl}.
 * </p>
 *
 * @author Ankur Srivastava
 * @see AdCategoryImpl
 * @see com.services.model.AdCategory
 * @see com.services.model.AdCategoryModel
 * @generated
 */
@JSON(strict = true)
public class AdCategoryModelImpl extends BaseModelImpl<AdCategory>
	implements AdCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ad category model instance should use the {@link com.services.model.AdCategory} interface instead.
	 */
	public static final String TABLE_NAME = "AL_AdCategory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "categoryId", Types.BIGINT },
			{ "categoryName", Types.VARCHAR },
			{ "categoryStatus", Types.BOOLEAN },
			{ "createdDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table AL_AdCategory (categoryId LONG not null primary key,categoryName VARCHAR(75) null,categoryStatus BOOLEAN,createdDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table AL_AdCategory";
	public static final String ORDER_BY_JPQL = " ORDER BY adCategory.categoryName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AL_AdCategory.categoryName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.services.model.AdCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.services.model.AdCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.services.model.AdCategory"),
			true);
	public static long CATEGORYSTATUS_COLUMN_BITMASK = 1L;
	public static long CATEGORYNAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AdCategory toModel(AdCategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AdCategory model = new AdCategoryImpl();

		model.setCategoryId(soapModel.getCategoryId());
		model.setCategoryName(soapModel.getCategoryName());
		model.setCategoryStatus(soapModel.getCategoryStatus());
		model.setCreatedDate(soapModel.getCreatedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AdCategory> toModels(AdCategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AdCategory> models = new ArrayList<AdCategory>(soapModels.length);

		for (AdCategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.services.model.AdCategory"));

	public AdCategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _categoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCategoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _categoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AdCategory.class;
	}

	@Override
	public String getModelClassName() {
		return AdCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("categoryId", getCategoryId());
		attributes.put("categoryName", getCategoryName());
		attributes.put("categoryStatus", getCategoryStatus());
		attributes.put("createdDate", getCreatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		String categoryName = (String)attributes.get("categoryName");

		if (categoryName != null) {
			setCategoryName(categoryName);
		}

		Boolean categoryStatus = (Boolean)attributes.get("categoryStatus");

		if (categoryStatus != null) {
			setCategoryStatus(categoryStatus);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	@JSON
	@Override
	public String getCategoryName() {
		if (_categoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryName;
		}
	}

	@Override
	public void setCategoryName(String categoryName) {
		_columnBitmask = -1L;

		_categoryName = categoryName;
	}

	@JSON
	@Override
	public boolean getCategoryStatus() {
		return _categoryStatus;
	}

	@Override
	public boolean isCategoryStatus() {
		return _categoryStatus;
	}

	@Override
	public void setCategoryStatus(boolean categoryStatus) {
		_columnBitmask |= CATEGORYSTATUS_COLUMN_BITMASK;

		if (!_setOriginalCategoryStatus) {
			_setOriginalCategoryStatus = true;

			_originalCategoryStatus = _categoryStatus;
		}

		_categoryStatus = categoryStatus;
	}

	public boolean getOriginalCategoryStatus() {
		return _originalCategoryStatus;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AdCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AdCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AdCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AdCategoryImpl adCategoryImpl = new AdCategoryImpl();

		adCategoryImpl.setCategoryId(getCategoryId());
		adCategoryImpl.setCategoryName(getCategoryName());
		adCategoryImpl.setCategoryStatus(getCategoryStatus());
		adCategoryImpl.setCreatedDate(getCreatedDate());

		adCategoryImpl.resetOriginalValues();

		return adCategoryImpl;
	}

	@Override
	public int compareTo(AdCategory adCategory) {
		int value = 0;

		value = getCategoryName().compareTo(adCategory.getCategoryName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AdCategory)) {
			return false;
		}

		AdCategory adCategory = (AdCategory)obj;

		long primaryKey = adCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AdCategoryModelImpl adCategoryModelImpl = this;

		adCategoryModelImpl._originalCategoryStatus = adCategoryModelImpl._categoryStatus;

		adCategoryModelImpl._setOriginalCategoryStatus = false;

		adCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdCategory> toCacheModel() {
		AdCategoryCacheModel adCategoryCacheModel = new AdCategoryCacheModel();

		adCategoryCacheModel.categoryId = getCategoryId();

		adCategoryCacheModel.categoryName = getCategoryName();

		String categoryName = adCategoryCacheModel.categoryName;

		if ((categoryName != null) && (categoryName.length() == 0)) {
			adCategoryCacheModel.categoryName = null;
		}

		adCategoryCacheModel.categoryStatus = getCategoryStatus();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			adCategoryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			adCategoryCacheModel.createdDate = Long.MIN_VALUE;
		}

		return adCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{categoryId=");
		sb.append(getCategoryId());
		sb.append(", categoryName=");
		sb.append(getCategoryName());
		sb.append(", categoryStatus=");
		sb.append(getCategoryStatus());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.services.model.AdCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryName</column-name><column-value><![CDATA[");
		sb.append(getCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryStatus</column-name><column-value><![CDATA[");
		sb.append(getCategoryStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AdCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AdCategory.class
		};
	private long _categoryId;
	private String _categoryName;
	private boolean _categoryStatus;
	private boolean _originalCategoryStatus;
	private boolean _setOriginalCategoryStatus;
	private Date _createdDate;
	private long _columnBitmask;
	private AdCategory _escapedModel;
}