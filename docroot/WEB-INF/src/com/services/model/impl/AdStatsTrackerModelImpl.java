/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.services.model.AdStatsTracker;
import com.services.model.AdStatsTrackerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AdStatsTracker service. Represents a row in the &quot;AL_AdStatsTracker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.services.model.AdStatsTrackerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdStatsTrackerImpl}.
 * </p>
 *
 * @author Ankur Srivastava
 * @see AdStatsTrackerImpl
 * @see com.services.model.AdStatsTracker
 * @see com.services.model.AdStatsTrackerModel
 * @generated
 */
public class AdStatsTrackerModelImpl extends BaseModelImpl<AdStatsTracker>
	implements AdStatsTrackerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ad stats tracker model instance should use the {@link com.services.model.AdStatsTracker} interface instead.
	 */
	public static final String TABLE_NAME = "AL_AdStatsTracker";
	public static final Object[][] TABLE_COLUMNS = {
			{ "adId", Types.BIGINT },
			{ "adCount", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "lastAccessedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table AL_AdStatsTracker (adId LONG not null primary key,adCount LONG,createdDate DATE null,lastAccessedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table AL_AdStatsTracker";
	public static final String ORDER_BY_JPQL = " ORDER BY adStatsTracker.adId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AL_AdStatsTracker.adId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.services.model.AdStatsTracker"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.services.model.AdStatsTracker"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.services.model.AdStatsTracker"));

	public AdStatsTrackerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _adId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAdId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _adId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AdStatsTracker.class;
	}

	@Override
	public String getModelClassName() {
		return AdStatsTracker.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("adId", getAdId());
		attributes.put("adCount", getAdCount());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("lastAccessedDate", getLastAccessedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long adId = (Long)attributes.get("adId");

		if (adId != null) {
			setAdId(adId);
		}

		Long adCount = (Long)attributes.get("adCount");

		if (adCount != null) {
			setAdCount(adCount);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date lastAccessedDate = (Date)attributes.get("lastAccessedDate");

		if (lastAccessedDate != null) {
			setLastAccessedDate(lastAccessedDate);
		}
	}

	@Override
	public long getAdId() {
		return _adId;
	}

	@Override
	public void setAdId(long adId) {
		_adId = adId;
	}

	@Override
	public long getAdCount() {
		return _adCount;
	}

	@Override
	public void setAdCount(long adCount) {
		_adCount = adCount;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public Date getLastAccessedDate() {
		return _lastAccessedDate;
	}

	@Override
	public void setLastAccessedDate(Date lastAccessedDate) {
		_lastAccessedDate = lastAccessedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AdStatsTracker.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AdStatsTracker toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AdStatsTracker)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AdStatsTrackerImpl adStatsTrackerImpl = new AdStatsTrackerImpl();

		adStatsTrackerImpl.setAdId(getAdId());
		adStatsTrackerImpl.setAdCount(getAdCount());
		adStatsTrackerImpl.setCreatedDate(getCreatedDate());
		adStatsTrackerImpl.setLastAccessedDate(getLastAccessedDate());

		adStatsTrackerImpl.resetOriginalValues();

		return adStatsTrackerImpl;
	}

	@Override
	public int compareTo(AdStatsTracker adStatsTracker) {
		long primaryKey = adStatsTracker.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AdStatsTracker)) {
			return false;
		}

		AdStatsTracker adStatsTracker = (AdStatsTracker)obj;

		long primaryKey = adStatsTracker.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AdStatsTracker> toCacheModel() {
		AdStatsTrackerCacheModel adStatsTrackerCacheModel = new AdStatsTrackerCacheModel();

		adStatsTrackerCacheModel.adId = getAdId();

		adStatsTrackerCacheModel.adCount = getAdCount();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			adStatsTrackerCacheModel.createdDate = createdDate.getTime();
		}
		else {
			adStatsTrackerCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date lastAccessedDate = getLastAccessedDate();

		if (lastAccessedDate != null) {
			adStatsTrackerCacheModel.lastAccessedDate = lastAccessedDate.getTime();
		}
		else {
			adStatsTrackerCacheModel.lastAccessedDate = Long.MIN_VALUE;
		}

		return adStatsTrackerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{adId=");
		sb.append(getAdId());
		sb.append(", adCount=");
		sb.append(getAdCount());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", lastAccessedDate=");
		sb.append(getLastAccessedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.services.model.AdStatsTracker");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>adId</column-name><column-value><![CDATA[");
		sb.append(getAdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adCount</column-name><column-value><![CDATA[");
		sb.append(getAdCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastAccessedDate</column-name><column-value><![CDATA[");
		sb.append(getLastAccessedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AdStatsTracker.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AdStatsTracker.class
		};
	private long _adId;
	private long _adCount;
	private Date _createdDate;
	private Date _lastAccessedDate;
	private AdStatsTracker _escapedModel;
}